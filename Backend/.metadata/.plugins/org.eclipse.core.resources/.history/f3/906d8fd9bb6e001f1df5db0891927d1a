package com.student.management.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.student.management.entity.User;
import com.student.management.repo.UserRepo;
import com.student.management.util.JwtUtil;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserRepo userRepo;

    @Autowired
    private PasswordEncoder passwordEncoder;
	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private JwtUtil jwtUtil;

//    @PostMapping("/register")
//    public String registerUser(@RequestBody User user) {
//        user.setPassword(passwordEncoder.encode(user.getPassword()));
//        userRepo.save(user);
//        System.out.println(user);
//        return "User registered successfully";
//    }
//    
    
	@PostMapping("/signup")
		public String signUp(@RequestBody User user) {
	     user.setPassword(passwordEncoder.encode(user.getPassword()));
	        userRepo.save(user);
	        System.out.println(user);
	        return "User registered successfully";		
	}

	@PostMapping("/login")
	public String logIn(@RequestBody User user) {
		try {
			System.out.println(user);
			Authentication authentication = authenticationManager
					.authenticate(new UsernamePasswordAuthenticationToken(
							user.getUsername(), user.getPassword())
					);
			System.out.println(user);
			if (authentication.isAuthenticated()) {
				return jwtUtil.generateToken(user.getUsername());
			} else {
				throw new UsernameNotFoundException("Invalid user request!");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new UsernameNotFoundException("Invalid user request!");
		}
      
	}
}
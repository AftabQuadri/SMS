package com.student.management.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import com.student.management.entity.Student;
import com.student.management.service.StudentService;

@RestController
@RequestMapping("/")
public class StudentController {

    @Autowired
    private StudentService service;

    @GetMapping("")
    public String home() {
    	return "welcome home";
    }
    @PostMapping("add")
    public ResponseEntity<String> insertSingleStudent(@RequestBody Student student) {
        System.out.println(student);
        String message = service.insertStudent(student);
        if (message.equalsIgnoreCase("success")) {
            return ResponseEntity.status(HttpStatus.CREATED).body("Student added successfully");
        }
        return ResponseEntity.internalServerError().body("There was an error creating a new student");
    }

    @GetMapping("getAll")
    public ResponseEntity<List<Student>> getAllStudents() {
        List<Student> allStudentsFromDB = service.getAllStudents();
        if (allStudentsFromDB!=null && !allStudentsFromDB.isEmpty() ) {
            return ResponseEntity.ok(allStudentsFromDB);
        }
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
    

    @GetMapping("get/{id}")
    public ResponseEntity<Student> getStudentById(@PathVariable String id) {
        Student studentFromDB = service.getStudentById(id);
        if (studentFromDB != null) {
            return new ResponseEntity<>(studentFromDB, HttpStatus.OK);
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
    }

    @PutMapping("update")
    public ResponseEntity<String> updateStudent(@RequestBody Student student) {
        String message = service.updateStudent(student);
        if (message.equalsIgnoreCase("success")) {
            return new ResponseEntity<>("Student updated successfully", HttpStatus.OK);
        }
        return ResponseEntity.internalServerError().body("There was an error updating the student");
    }

    @DeleteMapping("delete/{id}")
    public ResponseEntity<String> deleteStudentById(@PathVariable String id) {
        String message = service.deleteById(id);
        if (message.equalsIgnoreCase("success")) {
            return ResponseEntity.ok("Student deleted successfully");
        }
        return ResponseEntity.internalServerError().body("There was an error deleting the student");
    }

    @DeleteMapping("deleteAll")
    public ResponseEntity<String> deleteAllStudents() {
        String message = service.deleteAll();
        if (message.equalsIgnoreCase("success")) {
            return ResponseEntity.ok("All students deleted successfully");
        }
        return ResponseEntity.internalServerError().body("There was an error deleting all students");
    }
    
    @PostMapping("/token")
    public String getToken() {
    	return "fuck this is token";
    }

//    @PostMapping("/generateToken")
//    public String authenticateAndGetToken(@RequestBody AuthRequest authRequest) {
//        Authentication authentication = authenticationManager.authenticate(
//            new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword())
//        );
//        if (authentication.isAuthenticated()) {
//            return jwtService.generateToken(authRequest.getUsername());
//        } else {
//            throw new UsernameNotFoundException("Invalid user request!");
//        }
//    }

}
